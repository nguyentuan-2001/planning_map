{"id":"node_modules/ol/render/webgl/constants.js","dependencies":[{"name":"D:\\Udemy\\web-mapping\\package.json","includedInParent":true,"mtime":1701684151477},{"name":"D:\\Udemy\\web-mapping\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1701682152710}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLWorkerMessageType = void 0;\n/**\n * @module ol/render/webgl/constants\n */\n\n/**\n * @enum {string}\n */\nvar WebGLWorkerMessageType = exports.WebGLWorkerMessageType = {\n  GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',\n  GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',\n  GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS'\n};\n\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {number} id Message id; will be used both in request and response as a means of identification\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions render instructions raw binary buffer.\n * @property {number} [customAttributesSize] Amount of hit detection + custom attributes count in the render instructions.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {import(\"../../transform\").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates\n */"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":7}},{"generated":{"line":14,"column":4},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":13},"name":"WebGLWorkerMessageType"},{"generated":{"line":14,"column":26},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":35}},{"generated":{"line":14,"column":29},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":35},"name":"exports"},{"generated":{"line":14,"column":36},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":35}},{"generated":{"line":14,"column":37},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":35},"name":"WebGLWorkerMessageType"},{"generated":{"line":14,"column":59},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":35}},{"generated":{"line":14,"column":62},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":8,"column":38}},{"generated":{"line":15,"column":2},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":9,"column":2},"name":"GENERATE_POLYGON_BUFFERS"},{"generated":{"line":15,"column":26},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":9,"column":26}},{"generated":{"line":15,"column":28},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":9,"column":28}},{"generated":{"line":15,"column":54},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":9,"column":54}},{"generated":{"line":16,"column":2},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":10,"column":2},"name":"GENERATE_POINT_BUFFERS"},{"generated":{"line":16,"column":24},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":10,"column":24}},{"generated":{"line":16,"column":26},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":10,"column":26}},{"generated":{"line":16,"column":50},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":10,"column":50}},{"generated":{"line":17,"column":2},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":11,"column":2},"name":"GENERATE_LINE_STRING_BUFFERS"},{"generated":{"line":17,"column":30},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":11,"column":30}},{"generated":{"line":17,"column":32},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":11,"column":32}},{"generated":{"line":18,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":12,"column":0}},{"generated":{"line":18,"column":1},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":12,"column":1}},{"generated":{"line":20,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ol/render/webgl/constants.js","original":{"line":27,"column":0}}],"sources":{"node_modules/ol/render/webgl/constants.js":"/**\n * @module ol/render/webgl/constants\n */\n\n/**\n * @enum {string}\n */\nexport const WebGLWorkerMessageType = {\n  GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',\n  GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',\n  GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS',\n};\n\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {number} id Message id; will be used both in request and response as a means of identification\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions render instructions raw binary buffer.\n * @property {number} [customAttributesSize] Amount of hit detection + custom attributes count in the render instructions.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {import(\"../../transform\").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates\n */\n"},"lineCount":null}},"error":null,"hash":"abaf26f4794901402788e0c8ce4c5bdd","cacheData":{"env":{}}}