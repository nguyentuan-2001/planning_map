{"version":3,"sources":["node_modules/geotiff/dist-module/compression/lzw.js"],"names":["_basedecoder","_interopRequireDefault","require","e","__esModule","default","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","TypeError","_defineProperties","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","i","_toPrimitive","toPrimitive","call","String","Number","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","create","value","_setPrototypeOf","MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","d","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","pow","chunks","chunk2","hi","chunk3","appendReversed","dest","source","push","decompress","input","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","rev","result","code","oldCode","Error","concat","val","oldVal","undefined","LZWDecoder","exports","_BaseDecoder","arguments","decodeBlock","buffer","BaseDecoder"],"mappings":"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","file":"lzw.892aefeb.js","sourceRoot":"..","sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"]}